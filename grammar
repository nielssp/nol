Program ::= {Import} {Definition}

Import ::= "import" string

Definition ::= "let" Assign
             | "typeclass" TypeClass
             | "instance" Instance

Assign ::= name "=" Expr
         | name ":" TypeScheme

TypeClass ::= name name {name} ["extends" Constraint {"," Constraint}] "{" {"let" Assign} "}"

Instance ::=  ["forall" name {"," name} "."] [Constraint {"," Constraint} "=>"] Constraint "{" {"let" Assign} "}"

TypeScheme ::= "forall" name {"," name} "." TypeContext
             | TypeContext

TypeContext ::= Constraint {"," Constraint} "=>" Monotype
              | Monotype

Constraint ::= n_prefix TypeAtom {TypeAtom}

Monotype ::= TypeApp "->" Monotype
           | Monotype

TypeApp ::= TypeAtom {TypeAtom}

TypeAtom ::= "[" Monotype "]"
           | "(" [Monotype {"," Monotype}] ")"
           | n_prefix

Expr ::= LetExpr
       | IfExpr
       | LambdaExpr

LetExpr ::= "let" Assign {"," Assign} "in" Expr

IfExpr ::= "if" Expr "then" Expr "else" Expr

LambdaExpr ::= "\" name {name} "->" Expr
             | InfixExpr

InfixExpr ::= PrefixExpr n_infix LambdaExpr
            | PrefixExpr

PrefixExpr ::= PrefixExpr RecordAccess
             | RecordAccess

RecordAccess ::= RecordAccess "#" name
               | Atom

Atom ::= "(" n_infix ")"
       | "(" Expr {"," Expr} ")"
       | "(" ")"
       | List
       | Record
       | n_prefix
       | literal

List ::= "[" {Atom} "]"

Record ::= "{" Field {"," Field} "}"

Field ::= name "=" Expr

name ::= n_prefix | n_infix

literal ::= int
          | float
          | string
