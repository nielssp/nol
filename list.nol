import "util"

let length = \xs -> if xs == [] then 0 else 1 + length $ tail xs

let @ = \xs n -> if n == 0 then head xs else tail xs @ n - 1

let drop = \n xs ->
  if n == 0
    then xs
    else drop (n - 1) $ tail xs

let take = \n xs ->
  if n == 0
    then []
    else head xs :: take (n - 1) $ tail xs

let slice = \i length -> drop i .> take length

let append = \xs ys ->
  if xs == []
    then ys
    else if ys == []
      then xs
      else if tail xs == []
        then head xs :: ys
        else head xs :: append (tail xs) ys

let concat = foldr append []

let ++ = append

let reverse = \xs ->
  if length xs <= 1
    then xs
    else tail xs $> reverse .> (++ [(head xs)])

let reverse2 = \xs ->
  let rev = \xs acc -> if xs == [] then acc else rev (tail xs) $ head xs :: acc
  in rev xs []

let map = \f xs -> if xs == [] then [] else f (head xs) :: map f $ tail xs

let filter = \f xs ->
  if xs == []
    then []
    else if f $ head xs
      then head xs :: filter f $ tail xs
      else filter f $ tail xs

let `filter` = flip filter

let sort = \f list ->
  if list == []
    then []
    else
      let x       = head list
        , xs      = tail list
        , lesser  = xs `filter` \y -> f y x < 0
        , greater = xs `filter` \y -> f y x >= 0
      in
        sort f lesser ++ [x] ++ sort f greater

let sort2 = \f list ->
  if list == []
    then []
    else
      let x       = head list in
      let xs      = tail list in
      let lesser  = xs `filter` \y -> f y x < 0 in
      let greater = xs `filter` \y -> f y x >= 0
      in
        sort2 f lesser ++ [x] ++ sort2 f greater

let `sort` = flip sort

let foldl = \f z xs -> if xs == [] then z else foldl f (f z $ head xs) $ tail xs

let foldr = \f z xs -> if xs == [] then z else f (head xs) $ foldr f z $ tail xs

let zipWith = \f xs ys ->
  if (xs == []) | ys == []
    then []
    else f (head xs) (head ys) :: zipWith f (tail xs) (tail ys)

let zip = zipWith $ \x y -> [x y]

let flatten = foldr (++) []

let sum = \xs -> xs $> foldl (+) 0
let product = \xs -> xs $> foldl (*) 1

let `max` = \a b -> if a > b then a else b
let `min` = \a b -> if a > b then b else a

let .. = \from to -> if from > to then [] else from :: (from + 1) .. to

let iota = (..) 1